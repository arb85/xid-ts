{"version":3,"sources":["../src/index.ts"],"sourcesContent":["// (c) 2023-present, Yiwen AI Limited. All rights reserved.\n// See the file LICENSE for licensing terms.\n\nconst encodedLen = 20 // string encoded len\nconst rawLen = 12 // binary raw len\nconst errInvalidID = \"xid: invalid ID\"\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\nconst encoding = textEncoder.encode('0123456789abcdefghijklmnopqrstuv')\nconst dec = new Uint8Array(256).fill(0xFF)\nfor (let i = 0; i < encoding.length; i++) {\n  dec[encoding[i]] = i\n}\n\nconst start = getRandom3Bytes()\n\nexport class Xid {\n  private static machineId = getRandom3Bytes()\n  private static pid = getPid()\n  private static counter = start[0] << 16 | start[1] << 8 | start[2]\n\n  private id: Uint8Array\n  constructor(id?: Uint8Array) {\n    if (id == null) {\n      id = new Uint8Array(rawLen)\n      const view = new DataView(id.buffer)\n      const timestamp = Math.floor(Date.now() / 1000)\n      view.setUint32(0, timestamp)\n\n      id[4] = Xid.machineId[0]\n      id[5] = Xid.machineId[1]\n      id[6] = Xid.machineId[2]\n      id[7] = Xid.pid >> 8\n      id[8] = Xid.pid & 0x00FF\n\n      Xid.counter += 1\n      if (Xid.counter > 0xFFFFFF) {\n        Xid.counter = 0\n      }\n\n      id[9] = Xid.counter >> 16\n      id[10] = Xid.counter & 0x00FFFF >> 8\n      id[11] = Xid.counter & 0x0000FF\n\n    } else if (!(id instanceof Uint8Array) || id.length !== rawLen) {\n      throw new Error(errInvalidID)\n    }\n\n    this.id = id\n  }\n\n  static default(): Xid {\n    return new Xid(new Uint8Array(rawLen).fill(0))\n  }\n\n  static from(v: Xid | string | ArrayBuffer | Uint8Array | number[]): Xid {\n    if (v instanceof Xid) {\n      return v\n    }\n\n    if (typeof v === 'string') {\n      return Xid.parse(v)\n    }\n\n    if (v instanceof Uint8Array && v.length === rawLen) {\n      return new Xid(new Uint8Array(v))\n    }\n\n    if (v instanceof ArrayBuffer && v.byteLength === rawLen) {\n      return new Xid(new Uint8Array(v))\n    }\n\n    if (Array.isArray(v) && v.length === rawLen && v.every(byte => typeof byte === 'number' && byte >= 0 && byte <= 255)) {\n      return new Xid(new Uint8Array(v))\n    }\n\n    throw new Error(errInvalidID)\n  }\n\n  static parse(id: string): Xid {\n    if (id.length !== encodedLen) {\n      throw new Error(errInvalidID)\n    }\n\n    const xid = new Xid()\n    xid.decode(id)\n    return xid\n  }\n\n  private decode(str: string) {\n    const src = textEncoder.encode(str)\n    if (src.length !== encodedLen) {\n      throw new Error(errInvalidID)\n    }\n\n    for (const c of src) {\n      if (dec[c] == 0xFF) {\n        throw new Error(errInvalidID)\n      }\n    }\n\n    this.id[11] = dec[src[17]] << 6 | dec[src[18]] << 1 | dec[src[19]] >> 4\n    if (encoding[(this.id[11] << 4) & 0x1F] != src[19]) {\n      throw new Error(errInvalidID)\n    }\n\n    this.id[10] = dec[src[16]] << 3 | dec[src[17]] >> 2\n    this.id[9] = dec[src[14]] << 5 | dec[src[15]]\n    this.id[8] = dec[src[12]] << 7 | dec[src[13]] << 2 | dec[src[14]] >> 3\n    this.id[7] = dec[src[11]] << 4 | dec[src[12]] >> 1\n    this.id[6] = dec[src[9]] << 6 | dec[src[10]] << 1 | dec[src[11]] >> 4\n    this.id[5] = dec[src[8]] << 3 | dec[src[9]] >> 2\n    this.id[4] = dec[src[6]] << 5 | dec[src[7]]\n    this.id[3] = dec[src[4]] << 7 | dec[src[5]] << 2 | dec[src[6]] >> 3\n    this.id[2] = dec[src[3]] << 4 | dec[src[4]] >> 1\n    this.id[1] = dec[src[1]] << 6 | dec[src[2]] << 1 | dec[src[3]] >> 4\n    this.id[0] = dec[src[0]] << 3 | dec[src[1]] >> 2\n  }\n\n  encode(): string {\n    const dst = new Uint8Array(encodedLen)\n\n    dst[19] = encoding[(this.id[11] << 4) & 0x1F]\n    dst[18] = encoding[(this.id[11] >> 1) & 0x1F]\n    dst[17] = encoding[(this.id[11] >> 6) | (this.id[10] << 2) & 0x1F]\n    dst[16] = encoding[this.id[10] >> 3]\n    dst[15] = encoding[this.id[9] & 0x1F]\n    dst[14] = encoding[(this.id[9] >> 5) | (this.id[8] << 3) & 0x1F]\n    dst[13] = encoding[(this.id[8] >> 2) & 0x1F]\n    dst[12] = encoding[this.id[8] >> 7 | (this.id[7] << 1) & 0x1F]\n    dst[11] = encoding[(this.id[7] >> 4) | (this.id[6] << 4) & 0x1F]\n    dst[10] = encoding[(this.id[6] >> 1) & 0x1F]\n    dst[9] = encoding[(this.id[6] >> 6) | (this.id[5] << 2) & 0x1F]\n    dst[8] = encoding[this.id[5] >> 3]\n    dst[7] = encoding[this.id[4] & 0x1F]\n    dst[6] = encoding[this.id[4] >> 5 | (this.id[3] << 3) & 0x1F]\n    dst[5] = encoding[(this.id[3] >> 2) & 0x1F]\n    dst[4] = encoding[this.id[3] >> 7 | (this.id[2] << 1) & 0x1F]\n    dst[3] = encoding[(this.id[2] >> 4) | (this.id[1] << 4) & 0x1F]\n    dst[2] = encoding[(this.id[1] >> 1) & 0x1F]\n    dst[1] = encoding[(this.id[1] >> 6) | (this.id[0] << 2) & 0x1F]\n    dst[0] = encoding[this.id[0] >> 3]\n\n    return textDecoder.decode(dst)\n  }\n\n  timestamp(): number {\n    return new DataView(this.id.buffer).getUint32(0)\n  }\n\n  machine(): Uint8Array {\n    return this.id.slice(4, 7)\n  }\n\n  pid(): number {\n    return this.id[7] << 8 | this.id[8]\n  }\n\n  counter(): number {\n    return this.id[9] << 16 | this.id[10] << 8 | this.id[11]\n  }\n\n  isZero(): boolean {\n    return this.id.every(byte => byte === 0)\n  }\n\n  toString(): string {\n    return this.encode()\n  }\n\n  toBytes(): Uint8Array {\n    return this.id\n  }\n\n  equals(xid: Xid): boolean {\n    for (let i = 0; i < rawLen; i++) {\n      if (this.id[i] !== xid.id[i]) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\nfunction getRandom3Bytes(): Uint8Array {\n  return crypto.getRandomValues(new Uint8Array(3))\n}\n\nfunction getPid(): number {\n  if (typeof process === 'object' && process.pid > 0) {\n    return process.pid & 0xFFFF\n  }\n\n  const buf = crypto.getRandomValues(new Uint8Array(2))\n  return buf[0] << 8 | buf[1]\n}"],"mappings":";AAGA,IAAM,aAAa;AACnB,IAAM,SAAS;AACf,IAAM,eAAe;AACrB,IAAM,cAAc,IAAI,YAAY;AACpC,IAAM,cAAc,IAAI,YAAY;AACpC,IAAM,WAAW,YAAY,OAAO,kCAAkC;AACtE,IAAM,MAAM,IAAI,WAAW,GAAG,EAAE,KAAK,GAAI;AACzC,SAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,MAAI,SAAS,CAAC,CAAC,IAAI;AACrB;AAEA,IAAM,QAAQ,gBAAgB;AAEvB,IAAM,MAAN,MAAM,KAAI;AAAA,EACf,OAAe,YAAY,gBAAgB;AAAA,EAC3C,OAAe,MAAM,OAAO;AAAA,EAC5B,OAAe,UAAU,MAAM,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC;AAAA,EAEzD;AAAA,EACR,YAAY,IAAiB;AAC3B,QAAI,MAAM,MAAM;AACd,WAAK,IAAI,WAAW,MAAM;AAC1B,YAAM,OAAO,IAAI,SAAS,GAAG,MAAM;AACnC,YAAM,YAAY,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI;AAC9C,WAAK,UAAU,GAAG,SAAS;AAE3B,SAAG,CAAC,IAAI,KAAI,UAAU,CAAC;AACvB,SAAG,CAAC,IAAI,KAAI,UAAU,CAAC;AACvB,SAAG,CAAC,IAAI,KAAI,UAAU,CAAC;AACvB,SAAG,CAAC,IAAI,KAAI,OAAO;AACnB,SAAG,CAAC,IAAI,KAAI,MAAM;AAElB,WAAI,WAAW;AACf,UAAI,KAAI,UAAU,UAAU;AAC1B,aAAI,UAAU;AAAA,MAChB;AAEA,SAAG,CAAC,IAAI,KAAI,WAAW;AACvB,SAAG,EAAE,IAAI,KAAI,UAAU,SAAY;AACnC,SAAG,EAAE,IAAI,KAAI,UAAU;AAAA,IAEzB,WAAW,EAAE,cAAc,eAAe,GAAG,WAAW,QAAQ;AAC9D,YAAM,IAAI,MAAM,YAAY;AAAA,IAC9B;AAEA,SAAK,KAAK;AAAA,EACZ;AAAA,EAEA,OAAO,UAAe;AACpB,WAAO,IAAI,KAAI,IAAI,WAAW,MAAM,EAAE,KAAK,CAAC,CAAC;AAAA,EAC/C;AAAA,EAEA,OAAO,KAAK,GAA4D;AACtE,QAAI,aAAa,MAAK;AACpB,aAAO;AAAA,IACT;AAEA,QAAI,OAAO,MAAM,UAAU;AACzB,aAAO,KAAI,MAAM,CAAC;AAAA,IACpB;AAEA,QAAI,aAAa,cAAc,EAAE,WAAW,QAAQ;AAClD,aAAO,IAAI,KAAI,IAAI,WAAW,CAAC,CAAC;AAAA,IAClC;AAEA,QAAI,aAAa,eAAe,EAAE,eAAe,QAAQ;AACvD,aAAO,IAAI,KAAI,IAAI,WAAW,CAAC,CAAC;AAAA,IAClC;AAEA,QAAI,MAAM,QAAQ,CAAC,KAAK,EAAE,WAAW,UAAU,EAAE,MAAM,UAAQ,OAAO,SAAS,YAAY,QAAQ,KAAK,QAAQ,GAAG,GAAG;AACpH,aAAO,IAAI,KAAI,IAAI,WAAW,CAAC,CAAC;AAAA,IAClC;AAEA,UAAM,IAAI,MAAM,YAAY;AAAA,EAC9B;AAAA,EAEA,OAAO,MAAM,IAAiB;AAC5B,QAAI,GAAG,WAAW,YAAY;AAC5B,YAAM,IAAI,MAAM,YAAY;AAAA,IAC9B;AAEA,UAAM,MAAM,IAAI,KAAI;AACpB,QAAI,OAAO,EAAE;AACb,WAAO;AAAA,EACT;AAAA,EAEQ,OAAO,KAAa;AAC1B,UAAM,MAAM,YAAY,OAAO,GAAG;AAClC,QAAI,IAAI,WAAW,YAAY;AAC7B,YAAM,IAAI,MAAM,YAAY;AAAA,IAC9B;AAEA,eAAW,KAAK,KAAK;AACnB,UAAI,IAAI,CAAC,KAAK,KAAM;AAClB,cAAM,IAAI,MAAM,YAAY;AAAA,MAC9B;AAAA,IACF;AAEA,SAAK,GAAG,EAAE,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK;AACtE,QAAI,SAAU,KAAK,GAAG,EAAE,KAAK,IAAK,EAAI,KAAK,IAAI,EAAE,GAAG;AAClD,YAAM,IAAI,MAAM,YAAY;AAAA,IAC9B;AAEA,SAAK,GAAG,EAAE,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK;AAClD,SAAK,GAAG,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK,IAAI,IAAI,IAAI,EAAE,CAAC;AAC5C,SAAK,GAAG,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK;AACrE,SAAK,GAAG,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK;AACjD,SAAK,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK;AACpE,SAAK,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK;AAC/C,SAAK,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC;AAC1C,SAAK,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK;AAClE,SAAK,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK;AAC/C,SAAK,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK;AAClE,SAAK,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK;AAAA,EACjD;AAAA,EAEA,SAAiB;AACf,UAAM,MAAM,IAAI,WAAW,UAAU;AAErC,QAAI,EAAE,IAAI,SAAU,KAAK,GAAG,EAAE,KAAK,IAAK,EAAI;AAC5C,QAAI,EAAE,IAAI,SAAU,KAAK,GAAG,EAAE,KAAK,IAAK,EAAI;AAC5C,QAAI,EAAE,IAAI,SAAU,KAAK,GAAG,EAAE,KAAK,IAAM,KAAK,GAAG,EAAE,KAAK,IAAK,EAAI;AACjE,QAAI,EAAE,IAAI,SAAS,KAAK,GAAG,EAAE,KAAK,CAAC;AACnC,QAAI,EAAE,IAAI,SAAS,KAAK,GAAG,CAAC,IAAI,EAAI;AACpC,QAAI,EAAE,IAAI,SAAU,KAAK,GAAG,CAAC,KAAK,IAAM,KAAK,GAAG,CAAC,KAAK,IAAK,EAAI;AAC/D,QAAI,EAAE,IAAI,SAAU,KAAK,GAAG,CAAC,KAAK,IAAK,EAAI;AAC3C,QAAI,EAAE,IAAI,SAAS,KAAK,GAAG,CAAC,KAAK,IAAK,KAAK,GAAG,CAAC,KAAK,IAAK,EAAI;AAC7D,QAAI,EAAE,IAAI,SAAU,KAAK,GAAG,CAAC,KAAK,IAAM,KAAK,GAAG,CAAC,KAAK,IAAK,EAAI;AAC/D,QAAI,EAAE,IAAI,SAAU,KAAK,GAAG,CAAC,KAAK,IAAK,EAAI;AAC3C,QAAI,CAAC,IAAI,SAAU,KAAK,GAAG,CAAC,KAAK,IAAM,KAAK,GAAG,CAAC,KAAK,IAAK,EAAI;AAC9D,QAAI,CAAC,IAAI,SAAS,KAAK,GAAG,CAAC,KAAK,CAAC;AACjC,QAAI,CAAC,IAAI,SAAS,KAAK,GAAG,CAAC,IAAI,EAAI;AACnC,QAAI,CAAC,IAAI,SAAS,KAAK,GAAG,CAAC,KAAK,IAAK,KAAK,GAAG,CAAC,KAAK,IAAK,EAAI;AAC5D,QAAI,CAAC,IAAI,SAAU,KAAK,GAAG,CAAC,KAAK,IAAK,EAAI;AAC1C,QAAI,CAAC,IAAI,SAAS,KAAK,GAAG,CAAC,KAAK,IAAK,KAAK,GAAG,CAAC,KAAK,IAAK,EAAI;AAC5D,QAAI,CAAC,IAAI,SAAU,KAAK,GAAG,CAAC,KAAK,IAAM,KAAK,GAAG,CAAC,KAAK,IAAK,EAAI;AAC9D,QAAI,CAAC,IAAI,SAAU,KAAK,GAAG,CAAC,KAAK,IAAK,EAAI;AAC1C,QAAI,CAAC,IAAI,SAAU,KAAK,GAAG,CAAC,KAAK,IAAM,KAAK,GAAG,CAAC,KAAK,IAAK,EAAI;AAC9D,QAAI,CAAC,IAAI,SAAS,KAAK,GAAG,CAAC,KAAK,CAAC;AAEjC,WAAO,YAAY,OAAO,GAAG;AAAA,EAC/B;AAAA,EAEA,YAAoB;AAClB,WAAO,IAAI,SAAS,KAAK,GAAG,MAAM,EAAE,UAAU,CAAC;AAAA,EACjD;AAAA,EAEA,UAAsB;AACpB,WAAO,KAAK,GAAG,MAAM,GAAG,CAAC;AAAA,EAC3B;AAAA,EAEA,MAAc;AACZ,WAAO,KAAK,GAAG,CAAC,KAAK,IAAI,KAAK,GAAG,CAAC;AAAA,EACpC;AAAA,EAEA,UAAkB;AAChB,WAAO,KAAK,GAAG,CAAC,KAAK,KAAK,KAAK,GAAG,EAAE,KAAK,IAAI,KAAK,GAAG,EAAE;AAAA,EACzD;AAAA,EAEA,SAAkB;AAChB,WAAO,KAAK,GAAG,MAAM,UAAQ,SAAS,CAAC;AAAA,EACzC;AAAA,EAEA,WAAmB;AACjB,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA,EAEA,UAAsB;AACpB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,OAAO,KAAmB;AACxB,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,UAAI,KAAK,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,GAAG;AAC5B,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACF;AAEA,SAAS,kBAA8B;AACrC,SAAO,OAAO,gBAAgB,IAAI,WAAW,CAAC,CAAC;AACjD;AAEA,SAAS,SAAiB;AACxB,MAAI,OAAO,YAAY,YAAY,QAAQ,MAAM,GAAG;AAClD,WAAO,QAAQ,MAAM;AAAA,EACvB;AAEA,QAAM,MAAM,OAAO,gBAAgB,IAAI,WAAW,CAAC,CAAC;AACpD,SAAO,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC;AAC5B;","names":[]}